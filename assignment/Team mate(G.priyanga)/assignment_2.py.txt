# -*- coding: utf-8 -*-
"""Kumari Aarju Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/119BPNhjVZc8aWXS4KUolaFEWpMo2ivdm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import rcParams

"""###2.loading dataset"""

df=pd.read_csv('Churn_Modelling.csv')
df.head()

df.shape

df.isnull().any()

df.info()

df.describe()

df.Geography.value_counts()

df.Gender.value_counts()

df.Surname.value_counts()

"""##3.visualization

###1.univariate analysis
"""

sns.displot(df.CreditScore)

sns.distplot(df.Age)

sns.barplot(df.Geography.value_counts().index,df.Geography.value_counts())

sns.barplot(df.Gender.value_counts().index,df.Gender.value_counts())

sns.histplot(df.Tenure)

sns.histplot(df.CreditScore)

plt.pie(df.Geography.value_counts(),[0,0,0.2],autopct='%1.1f%%',labels=['France','Germany','Spain'],shadow=True,colors=['purple','yellow','green'])
plt.show()

"""###2.bivariate analysis"""

plt.bar(df.Age,df.CreditScore)

sns.lineplot(df.CreditScore,df.EstimatedSalary)

sns.scatterplot(df.Balance,df.EstimatedSalary)

plt.bar(df.Balance,df.EstimatedSalary)
plt.xlabel('Balance')
plt.ylabel('EstimatedSalary')
plt.title('Barplot')

sns.lineplot(df.Age,df.Tenure)

"""###3.multivariate analysis"""

df.hist(figsize=[10,10])

"""##4.descriptive statistics"""

df.describe()

df.corr()

df.Age.mean()

df.median()

"""##5.handle missing values"""

df.isnull().any()

"""##6.finding and replacing outliers"""

sns.boxplot(df.CreditScore)

q3=df.CreditScore.quantile(0.75)
q1=df.CreditScore.quantile(0.25)
iqr=q3-q1

up_limit=q3+1.5*iqr
lw_limit=q1-1.5*iqr

df.median()

df['CreditScore']=np.where(df['CreditScore']<lw_limit,652,df['CreditScore'])

sns.boxplot(df.CreditScore)

df.shape

"""##7.encoding"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

df.Surname=le.fit_transform(df.Surname)
df.Geography=le.fit_transform(df.Geography)
df.Gender=le.fit_transform(df.Gender)
df.head()

plt.figure(figsize=[10,8])
sns.heatmap(df.corr(),annot=True)

"""##8.Split the data into dependent and independent variables"""

y=df['EstimatedSalary']
y

X=df.drop(columns=['EstimatedSalary'],axis=1)
X.head()

"""##9.Scale the independent variables"""

from sklearn.preprocessing import scale

x_scaled=pd.DataFrame(scale(X),columns=X.columns)
x_scaled.head()

"""##10.Split the data into training and testing"""

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(x_scaled,y,test_size=0.3,random_state=0)
