{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "Import the Dataset"
      ],
      "metadata": {
        "id": "ZIGeX2SN4end"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "id": "9QqLNbfz4ns0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "outputId": "40807474-8aa2-4921-dfcf-c7bfc742dbbe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-f0261ce0-8d3d-4f57-84e7-fffbdeca1ba0\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-f0261ce0-8d3d-4f57-84e7-fffbdeca1ba0\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving spam.csv to spam.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Import required libraries**\n",
        "\n"
      ],
      "metadata": {
        "id": "ghP1qRWK0O12"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import csv\n",
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
        "import nltk\n",
        "nltk.download('stopwords')  \n",
        "from nltk.corpus import stopwords\n",
        "STOPWORDS = set(stopwords.words('english'))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ulfQWre5lwkO",
        "outputId": "3d132bbd-a86a-4911-ff13-9856f6f5c28b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Import dataset**"
      ],
      "metadata": {
        "id": "dbpTZRgo0aUT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import io\n",
        "dataset = pd.read_csv(io.BytesIO(uploaded['spam.csv']), encoding = \"ISO-8859-1\")"
      ],
      "metadata": {
        "id": "NJSQAU8bmJVt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dataset"
      ],
      "metadata": {
        "id": "Zfdffoymnj3B",
        "outputId": "feaf46c3-adec-4ecd-90e4-54bfaaa2d8f8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        v1                                                 v2 Unnamed: 2  \\\n",
              "0      ham  Go until jurong point, crazy.. Available only ...        NaN   \n",
              "1      ham                      Ok lar... Joking wif u oni...        NaN   \n",
              "2     spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n",
              "3      ham  U dun say so early hor... U c already then say...        NaN   \n",
              "4      ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n",
              "...    ...                                                ...        ...   \n",
              "5567  spam  This is the 2nd time we have tried 2 contact u...        NaN   \n",
              "5568   ham              Will Ì_ b going to esplanade fr home?        NaN   \n",
              "5569   ham  Pity, * was in mood for that. So...any other s...        NaN   \n",
              "5570   ham  The guy did some bitching but I acted like i'd...        NaN   \n",
              "5571   ham                         Rofl. Its true to its name        NaN   \n",
              "\n",
              "     Unnamed: 3 Unnamed: 4  \n",
              "0           NaN        NaN  \n",
              "1           NaN        NaN  \n",
              "2           NaN        NaN  \n",
              "3           NaN        NaN  \n",
              "4           NaN        NaN  \n",
              "...         ...        ...  \n",
              "5567        NaN        NaN  \n",
              "5568        NaN        NaN  \n",
              "5569        NaN        NaN  \n",
              "5570        NaN        NaN  \n",
              "5571        NaN        NaN  \n",
              "\n",
              "[5572 rows x 5 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4418c03a-8e1c-4e9c-ac20-1c8ea67dce4e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>v1</th>\n",
              "      <th>v2</th>\n",
              "      <th>Unnamed: 2</th>\n",
              "      <th>Unnamed: 3</th>\n",
              "      <th>Unnamed: 4</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ham</td>\n",
              "      <td>Go until jurong point, crazy.. Available only ...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ham</td>\n",
              "      <td>Ok lar... Joking wif u oni...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>spam</td>\n",
              "      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ham</td>\n",
              "      <td>U dun say so early hor... U c already then say...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ham</td>\n",
              "      <td>Nah I don't think he goes to usf, he lives aro...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5567</th>\n",
              "      <td>spam</td>\n",
              "      <td>This is the 2nd time we have tried 2 contact u...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5568</th>\n",
              "      <td>ham</td>\n",
              "      <td>Will Ì_ b going to esplanade fr home?</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5569</th>\n",
              "      <td>ham</td>\n",
              "      <td>Pity, * was in mood for that. So...any other s...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5570</th>\n",
              "      <td>ham</td>\n",
              "      <td>The guy did some bitching but I acted like i'd...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5571</th>\n",
              "      <td>ham</td>\n",
              "      <td>Rofl. Its true to its name</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5572 rows × 5 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4418c03a-8e1c-4e9c-ac20-1c8ea67dce4e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4418c03a-8e1c-4e9c-ac20-1c8ea67dce4e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4418c03a-8e1c-4e9c-ac20-1c8ea67dce4e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "vocab_size = 5000\n",
        "embedding_dim = 64\n",
        "max_length = 200\n",
        "trunc_type = 'post'\n",
        "padding_type = 'post'\n",
        "oov_tok = '<OOV>'\n",
        "training_portion = .8"
      ],
      "metadata": {
        "id": "bAikw7ObzQmM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Read the dataset and do pre-processing.\n",
        "\n",
        "To remove the stop words."
      ],
      "metadata": {
        "id": "E52Z7wbo1Bvl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "articles = []\n",
        "labels = []\n",
        "\n",
        "with open(\"spam.csv\", 'r', encoding = \"ISO-8859-1\") as dataset:\n",
        "    reader = csv.reader(dataset, delimiter=',')\n",
        "    next(reader)\n",
        "    for row in reader:\n",
        "        labels.append(row[0])\n",
        "        article = row[1]\n",
        "        for word in STOPWORDS:\n",
        "            token = ' ' + word + ' '\n",
        "            article = article.replace(token, ' ')\n",
        "            article = article.replace(' ', ' ')\n",
        "        articles.append(article)\n",
        "print(len(labels))\n",
        "print(len(articles))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tAdCQlDazXEB",
        "outputId": "4128c8c6-aa52-4ac1-9cf3-ce1883290cb9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5572\n",
            "5572\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Train the model**"
      ],
      "metadata": {
        "id": "sjdXzrlJ1Gw7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_size = int(len(articles) * training_portion)\n",
        "\n",
        "train_articles = articles[0: train_size]\n",
        "train_labels = labels[0: train_size]\n",
        "\n",
        "validation_articles = articles[train_size:]\n",
        "validation_labels = labels[train_size:]\n",
        "\n",
        "print(train_size)\n",
        "print(len(train_articles))\n",
        "print(len(train_labels))\n",
        "print(len(validation_articles))\n",
        "print(len(validation_labels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XX7X4IQBzc9y",
        "outputId": "2bdb788e-0022-4c78-ec1a-0b6a9595f0ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4457\n",
            "4457\n",
            "4457\n",
            "1115\n",
            "1115\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\n",
        "tokenizer.fit_on_texts(train_articles)\n",
        "word_index = tokenizer.word_index\n",
        "dict(list(word_index.items())[0:10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IUUzkhjcze23",
        "outputId": "1adb2a2e-0baa-4254-9d21-6ebdafc609ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'<OOV>': 1,\n",
              " 'i': 2,\n",
              " 'u': 3,\n",
              " 'call': 4,\n",
              " 'you': 5,\n",
              " '2': 6,\n",
              " 'get': 7,\n",
              " \"i'm\": 8,\n",
              " 'ur': 9,\n",
              " 'now': 10}"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Traning data to Sequences**"
      ],
      "metadata": {
        "id": "dKFspDee1Mpv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_sequences = tokenizer.texts_to_sequences(train_articles)\n",
        "print(train_sequences[10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Y7dprX-ziM7",
        "outputId": "d6c316a8-304a-4ec0-a64e-3f8cd0db2124"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[8, 189, 37, 201, 30, 260, 293, 991, 222, 53, 153, 3815, 423, 46]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Train neural network for NLP**"
      ],
      "metadata": {
        "id": "YQCyIW2-1R94"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_padded = pad_sequences(train_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n",
        "print(len(train_sequences[0]))\n",
        "print(len(train_padded[0]))\n",
        "\n",
        "print(len(train_sequences[1]))\n",
        "print(len(train_padded[1]))\n",
        "\n",
        "print(len(train_sequences[10]))\n",
        "print(len(train_padded[10]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4TQjlc67zmuw",
        "outputId": "15a7398a-af56-421e-9860-3aa8e3a4a39f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "16\n",
            "200\n",
            "6\n",
            "200\n",
            "14\n",
            "200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(train_padded[10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kumXYmkvzppD",
        "outputId": "a81246b1-103a-43cf-9c63-31bf3acb6ce2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[   8  189   37  201   30  260  293  991  222   53  153 3815  423   46\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "validation_sequences = tokenizer.texts_to_sequences(validation_articles)\n",
        "validation_padded = pad_sequences(validation_sequences, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n",
        "\n",
        "print(len(validation_sequences))\n",
        "print(validation_padded.shape)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UmYgpsHFzrFy",
        "outputId": "44be52a2-6988-4a48-8f44-e07457725266"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1115\n",
            "(1115, 200)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "label_tokenizer = Tokenizer()\n",
        "label_tokenizer.fit_on_texts(labels)\n",
        "\n",
        "training_label_seq = np.array(label_tokenizer.texts_to_sequences(train_labels))\n",
        "validation_label_seq = np.array(label_tokenizer.texts_to_sequences(validation_labels))\n",
        "print(training_label_seq[0])\n",
        "print(training_label_seq[1])\n",
        "print(training_label_seq[2])\n",
        "print(training_label_seq.shape)\n",
        "\n",
        "print(validation_label_seq[0])\n",
        "print(validation_label_seq[1])\n",
        "print(validation_label_seq[2])\n",
        "print(validation_label_seq.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1OVkYRAmzvNA",
        "outputId": "57e602ae-d245-4ac0-dc61-c90eb3e13d0f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\n",
            "[1]\n",
            "[2]\n",
            "(4457, 1)\n",
            "[1]\n",
            "[2]\n",
            "[1]\n",
            "(1115, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "reverse_word_index = dict([(value, key) for (key, value) in word_index.items()])\n",
        "\n",
        "def decode_article(text):\n",
        "    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n",
        "print(decode_article(train_padded[10]))\n",
        "print('---')\n",
        "print(train_articles[10])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uI0DBJ2Hzxq6",
        "outputId": "10da68ed-31a3-4c20-c43d-c52fbd02ef02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "i'm gonna home soon want talk stuff anymore tonight k i've cried enough today ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ?\n",
            "---\n",
            "I'm gonna home soon want talk stuff anymore tonight, k? I've cried enough today.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**To implement LSTM**"
      ],
      "metadata": {
        "id": "2G-Vq1CN1dqj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model = tf.keras.Sequential([\n",
        "   \n",
        "    tf.keras.layers.Embedding(vocab_size, embedding_dim),\n",
        "    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(embedding_dim)),\n",
        "    tf.keras.layers.Dense(embedding_dim, activation='relu'),\n",
        "    tf.keras.layers.Dense(6, activation='softmax')\n",
        "])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DHzP97zxz5U4",
        "outputId": "4de6a91c-cbb2-49bb-f83d-f8daccaff111"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " embedding (Embedding)       (None, None, 64)          320000    \n",
            "                                                                 \n",
            " bidirectional (Bidirectiona  (None, 128)              66048     \n",
            " l)                                                              \n",
            "                                                                 \n",
            " dense (Dense)               (None, 64)                8256      \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 6)                 390       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 394,694\n",
            "Trainable params: 394,694\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(set(labels))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jqQB_Yv_z9WQ",
        "outputId": "c1202dbe-b89f-43b8-f498-9f1966acda1e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'ham', 'spam'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "num_epochs = 10\n",
        "history = model.fit(train_padded, training_label_seq, epochs=num_epochs, validation_data=(validation_padded, validation_label_seq), verbose=2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6QqolQyIz_re",
        "outputId": "3a04d75f-0584-487b-f6c2-0e499b00d3ed"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n",
            "140/140 - 33s - loss: 0.3079 - accuracy: 0.9237 - val_loss: 0.0536 - val_accuracy: 0.9874 - 33s/epoch - 239ms/step\n",
            "Epoch 2/10\n",
            "140/140 - 30s - loss: 0.0297 - accuracy: 0.9924 - val_loss: 0.0432 - val_accuracy: 0.9874 - 30s/epoch - 213ms/step\n",
            "Epoch 3/10\n",
            "140/140 - 31s - loss: 0.0129 - accuracy: 0.9973 - val_loss: 0.0366 - val_accuracy: 0.9901 - 31s/epoch - 220ms/step\n",
            "Epoch 4/10\n",
            "140/140 - 31s - loss: 0.0050 - accuracy: 0.9991 - val_loss: 0.0663 - val_accuracy: 0.9821 - 31s/epoch - 224ms/step\n",
            "Epoch 5/10\n",
            "140/140 - 28s - loss: 0.0062 - accuracy: 0.9982 - val_loss: 0.0467 - val_accuracy: 0.9892 - 28s/epoch - 203ms/step\n",
            "Epoch 6/10\n",
            "140/140 - 29s - loss: 0.0021 - accuracy: 0.9996 - val_loss: 0.0495 - val_accuracy: 0.9874 - 29s/epoch - 206ms/step\n",
            "Epoch 7/10\n",
            "140/140 - 30s - loss: 0.0012 - accuracy: 0.9998 - val_loss: 0.0610 - val_accuracy: 0.9892 - 30s/epoch - 216ms/step\n",
            "Epoch 8/10\n",
            "140/140 - 32s - loss: 9.7783e-04 - accuracy: 0.9996 - val_loss: 0.0608 - val_accuracy: 0.9848 - 32s/epoch - 229ms/step\n",
            "Epoch 9/10\n",
            "140/140 - 31s - loss: 8.1823e-04 - accuracy: 0.9998 - val_loss: 0.0574 - val_accuracy: 0.9848 - 31s/epoch - 219ms/step\n",
            "Epoch 10/10\n",
            "140/140 - 30s - loss: 4.3584e-04 - accuracy: 0.9998 - val_loss: 0.0651 - val_accuracy: 0.9848 - 30s/epoch - 215ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_graphs(history, string):\n",
        "  plt.plot(history.history[string])\n",
        "  plt.plot(history.history['val_'+string])\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.ylabel(string)\n",
        "  plt.legend([string, 'val_'+string])\n",
        "  plt.show()\n",
        "  \n",
        "plot_graphs(history, \"accuracy\")\n",
        "plot_graphs(history, \"loss\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "ujWPxsde1sdP",
        "outputId": "a869edd7-2362-4abf-971c-d923ec59922c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYgAAAEGCAYAAAB/+QKOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3de3zcdZ3v8ddncm2TTHpLm0wv9EKhnbRStCAcF1DkUm90XVfLRRc8Kg9ZEW/LEQUVWTzeztGze+SoHBdXXVjoAut2D0hFQZFd0Zba0qaFUkopSW/pNb3mNp/zx++XZJJO2qTNL79M8n4+HvOY+V3nM9Pm957f7/v9/X7m7oiIiPSUiLsAEREZmhQQIiKSkwJCRERyUkCIiEhOCggREcmpMO4CBsqECRN8+vTpcZchIpJXnn/++d3uXpVr2rAJiOnTp7Ny5cq4yxARyStm9lpv03SISUREclJAiIhITgoIERHJadi0QYjIyNTa2kp9fT3Hjh2Lu5QhrbS0lClTplBUVNTnZRQQIpLX6uvrqaioYPr06ZhZ3OUMSe7Onj17qK+vZ8aMGX1eToeYRCSvHTt2jPHjxyscTsDMGD9+fL/3shQQIpL3FA4ndyrf0YgPiANHWvm7X73M2voDcZciIjKkjPiASCTgu7/ayG837oq7FBHJU+Xl5XGXEIkRHxAVpUWcMX4067c3xV2KiMiQEmlAmNkiM3vJzDaZ2W05pn/czNaa2Woze9bM0lnTvhAu95KZXRllnbWpJOu3KSBE5PS4O7feeivz5s1j/vz5PPTQQwBs376diy++mAULFjBv3jx+97vf0d7ezg033NA573e/+92Yqz9eZN1czawAuAe4HKgHVpjZMndfnzXbA+7+g3D+q4DvAIvCoLgaqAVSwK/M7Cx3b4+i1nRNksfX7uDgsVYqSvveR1hEhpav/nvdgP/YS6eSfOU9tX2a99FHH2X16tWsWbOG3bt3c95553HxxRfzwAMPcOWVV3L77bfT3t7OkSNHWL16NQ0NDaxbtw6A/fv3D2jdAyHKPYjzgU3uvtndW4AHgcXZM7h79r9kGdBxg+zFwIPu3uzurwKbwvVFIp1KAvDijoNRvYWIjADPPvss11xzDQUFBUyaNIlLLrmEFStWcN555/HjH/+YO++8k7Vr11JRUcHMmTPZvHkzn/zkJ3niiSdIJpNxl3+cKE+Umwy8njVcD7y550xm9gngs0AxcGnWss/1WHZyjmVvBG4EmDZt2ikXWpuqBKCu4QDnTR93yusRkXj19Zf+YLv44ot55plneOyxx7jhhhv47Gc/y1/91V+xZs0ali9fzg9+8AOWLl3KfffdF3ep3cTeSO3u97j7LODzwB39XPZed1/o7gurqnJezrxPJlaUML6sWA3VInJaLrroIh566CHa29tpbGzkmWee4fzzz+e1115j0qRJfOxjH+OjH/0oq1atYvfu3WQyGd73vvdx9913s2rVqrjLP06UexANwNSs4SnhuN48CHz/FJc9LWZGOpVUQIjIaXnve9/L73//e8455xzMjG9961tUV1fzk5/8hG9/+9sUFRVRXl7OT3/6UxoaGvjwhz9MJpMB4Otf/3rM1R/P3P3kc53Kis0KgY3A2wk27iuAa929Lmue2e7+cvj6PcBX3H2hmdUCDxC0O6SAXwOzT9RIvXDhQj+dGwZ9/Rcb+PGzW6i760qKCmLfsRKRPtqwYQNz586Nu4y8kOu7MrPn3X1hrvkj24Nw9zYzuxlYDhQA97l7nZndBax092XAzWZ2GdAK7AOuD5etM7OlwHqgDfhEVD2YOqRrkrS0Z9i06xBza4ZeY5GIyGCL9Gqu7v448HiPcV/Oev2pEyz7NeBr0VXXXWdD9bYmBYSICEOgkXqomDGhjFFFBTphTkQkpIAIFSSMOTUVrN+ui/aJiIACopt0TXDJjaga7kVE8okCIks6laTpWBv1+47GXYqISOwUEFmyG6pFREY6BUSWsydVkDB0wpyIROZE947YsmUL8+bNG8RqTkwBkWVUcQGzqsrVk0lEhIjPg8hH6VSSFa/ujbsMETkVv7gNdqwd2HVWz4d3fKPXybfddhtTp07lE5/4BAB33nknhYWFPP300+zbt4/W1lbuvvtuFi9e3Os6cjl27Bg33XQTK1eupLCwkO985zu87W1vo66ujg9/+MO0tLSQyWR45JFHSKVSfOADH6C+vp729na+9KUvsWTJktP62KCAOE66Jsm/rd7GvsMtjC0rjrscERnilixZwqc//enOgFi6dCnLly/nlltuIZlMsnv3bi644AKuuuoqzKzP673nnnswM9auXcuLL77IFVdcwcaNG/nBD37Apz71Ka677jpaWlpob2/n8ccfJ5VK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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}