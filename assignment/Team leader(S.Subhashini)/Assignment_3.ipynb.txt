{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "ebOvnXX2UQzG"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from sklearn.model_selection import train_test_split\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LJE-mYjPYN9V",
        "outputId": "a2215ce7-04c0-446e-ec43-465577679cec"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "lXQMF4z6YZ8C"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.layers import Convolution2D\n",
        "from tensorflow.keras.layers import MaxPooling2D\n",
        "from tensorflow.keras.layers import Flatten"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "8ZtUnRMIYjvW"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "train_datagen = ImageDataGenerator(rescale=1./255,shear_range=0.2,zoom_range=0.2,horizontal_flip=True,vertical_flip=True)\n",
        "test_datagen = ImageDataGenerator(rescale=1./255)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ImEwShQ9Ypaw",
        "outputId": "be00b643-d81f-4f8e-d6f5-aedb02440a9e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 3384 images belonging to 5 classes.\n"
          ]
        }
      ],
      "source": [
        "x_train = train_datagen.flow_from_directory(r\"/content/drive/MyDrive/flowers\",target_size=(128,128),batch_size=32,class_mode=\"categorical\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1BTCmNScfhDs",
        "outputId": "65e776be-d3f5-43ac-f8b7-12c4d28858e9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'daisy': 0, 'dandelion': 1, 'rose': 2, 'sunflower': 3, 'tulip': 4}"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "x_train.class_indices"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "2BmF2J-ofxk6"
      },
      "outputs": [],
      "source": [
        "from keras.models import Sequential\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Convolution2D(32,(3,3),input_shape=(128,128,3),activation='relu'))\n",
        "model.add(MaxPooling2D(pool_size=(2,2)))\n",
        "model.add(Flatten())\n",
        "model.add(Dense(units=300,kernel_initializer=\"random_uniform\",activation=\"relu\"))\n",
        "model.add(Dense(units=200,kernel_initializer=\"random_uniform\",activation=\"relu\"))\n",
        "model.add(Dense(units=5,kernel_initializer=\"random_uniform\",activation=\"softmax\"))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RXK9w6eygf5I",
        "outputId": "305dc4b1-9016-4150-e715-250b2ff281d2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/20\n",
            "100/100 [==============================] - 617s 6s/step - loss: 1.1364 - accuracy: 0.4759 - val_loss: 1.0092 - val_accuracy: 0.5399\n",
            "Epoch 2/20\n",
            "100/100 [==============================] - 43s 433ms/step - loss: 0.9185 - accuracy: 0.6075 - val_loss: 0.8597 - val_accuracy: 0.6460\n",
            "Epoch 3/20\n",
            "100/100 [==============================] - 43s 433ms/step - loss: 0.8526 - accuracy: 0.6338 - val_loss: 0.8165 - val_accuracy: 0.6495\n",
            "Epoch 4/20\n",
            "100/100 [==============================] - 43s 436ms/step - loss: 0.8145 - accuracy: 0.6595 - val_loss: 0.8118 - val_accuracy: 0.6587\n",
            "Epoch 5/20\n",
            "100/100 [==============================] - 43s 430ms/step - loss: 0.7719 - accuracy: 0.6867 - val_loss: 0.6937 - val_accuracy: 0.7095\n",
            "Epoch 6/20\n",
            "100/100 [==============================] - 43s 435ms/step - loss: 0.7383 - accuracy: 0.6949 - val_loss: 0.7095 - val_accuracy: 0.7199\n",
            "Epoch 7/20\n",
            "100/100 [==============================] - 43s 431ms/step - loss: 0.7165 - accuracy: 0.6980 - val_loss: 0.6643 - val_accuracy: 0.7329\n",
            "Epoch 8/20\n",
            "100/100 [==============================] - 43s 433ms/step - loss: 0.6825 - accuracy: 0.7193 - val_loss: 0.6800 - val_accuracy: 0.7199\n",
            "Epoch 9/20\n",
            "100/100 [==============================] - 43s 433ms/step - loss: 0.6540 - accuracy: 0.7274 - val_loss: 0.6481 - val_accuracy: 0.7473\n",
            "Epoch 10/20\n",
            "100/100 [==============================] - 43s 433ms/step - loss: 0.6371 - accuracy: 0.7478 - val_loss: 0.6179 - val_accuracy: 0.7527\n",
            "Epoch 11/20\n",
            "100/100 [==============================] - 43s 433ms/step - loss: 0.6115 - accuracy: 0.7572 - val_loss: 0.5654 - val_accuracy: 0.7766\n",
            "Epoch 12/20\n",
            "100/100 [==============================] - 43s 431ms/step - loss: 0.5937 - accuracy: 0.7616 - val_loss: 0.5247 - val_accuracy: 0.7961\n",
            "Epoch 13/20\n",
            "100/100 [==============================] - 43s 430ms/step - loss: 0.5730 - accuracy: 0.7666 - val_loss: 0.5643 - val_accuracy: 0.7689\n",
            "Epoch 14/20\n",
            "100/100 [==============================] - 43s 432ms/step - loss: 0.5867 - accuracy: 0.7556 - val_loss: 0.5395 - val_accuracy: 0.7813\n",
            "Epoch 15/20\n",
            "100/100 [==============================] - 43s 429ms/step - loss: 0.5630 - accuracy: 0.7697 - val_loss: 0.4854 - val_accuracy: 0.8097\n",
            "Epoch 16/20\n",
            "100/100 [==============================] - 43s 434ms/step - loss: 0.5387 - accuracy: 0.7854 - val_loss: 0.5180 - val_accuracy: 0.8005\n",
            "Epoch 17/20\n",
            "100/100 [==============================] - 43s 430ms/step - loss: 0.5171 - accuracy: 0.7901 - val_loss: 0.4867 - val_accuracy: 0.8047\n",
            "Epoch 18/20\n",
            "100/100 [==============================] - 43s 429ms/step - loss: 0.5102 - accuracy: 0.7870 - val_loss: 0.4978 - val_accuracy: 0.8026\n",
            "Epoch 19/20\n",
            "100/100 [==============================] - 43s 428ms/step - loss: 0.4845 - accuracy: 0.8086 - val_loss: 0.4662 - val_accuracy: 0.8257\n",
            "Epoch 20/20\n",
            "100/100 [==============================] - 43s 428ms/step - loss: 0.4934 - accuracy: 0.8020 - val_loss: 0.4357 - val_accuracy: 0.8265\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f50e2074f10>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "model.compile(loss=\"categorical_crossentropy\",optimizer=\"adam\",metrics=[\"accuracy\"])\n",
        "model.fit(x_train,steps_per_epoch=100,epochs=20,validation_data=x_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "97Szb1yHiTdm"
      },
      "outputs": [],
      "source": [
        "model.save(\"flower.h5\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "b0uYjudhlUut"
      },
      "outputs": [],
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145
        },
        "id": "P4d_zK7WlWxk",
        "outputId": "6b952499-b5e8-42c9-bfa5-c797603a4c2a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=128x128 at 0x7F50D063F050>"
            ],
            "image/png": "\n"
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "model = load_model(\"/content/flower.h5\")\n",
        "img = image.load_img(r\"/content/drive/MyDrive/flowers/daisy/10555815624_dc211569b0.jpg\",target_size=(128,128))\n",
        "img"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HXYL1doMot8v",
        "outputId": "a0c55947-b6b4-4daa-daef-373db1f2465f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PIL.Image.Image"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ],
      "source": [
        "type(img)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0QD0JOL2oykl",
        "outputId": "6e5b7ce5-a9d3-435d-89e3-dbca9eb4344d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 11.,  16.,   9.],\n",
              "        [ 12.,  17.,  10.],\n",
              "        [ 15.,  18.,  11.],\n",
              "        ...,\n",
              "        [ 56.,  42.,  15.],\n",
              "        [ 50.,  40.,  15.],\n",
              "        [ 59.,  43.,  18.]],\n",
              "\n",
              "       [[ 11.,  16.,   9.],\n",
              "        [ 10.,  15.,   8.],\n",
              "        [ 10.,  15.,   8.],\n",
              "        ...,\n",
              "        [ 56.,  42.,  15.],\n",
              "        [ 58.,  44.,  15.],\n",
              "        [ 64.,  48.,  15.]],\n",
              "\n",
              "       [[ 12.,  15.,   8.],\n",
              "        [ 12.,  15.,   8.],\n",
              "        [ 11.,  14.,   7.],\n",
              "        ...,\n",
              "        [ 57.,  48.,  19.],\n",
              "        [ 60.,  49.,  17.],\n",
              "        [ 71.,  52.,  19.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[219., 206., 226.],\n",
              "        [217., 205., 219.],\n",
              "        [223., 212., 218.],\n",
              "        ...,\n",
              "        [ 48.,  66.,  24.],\n",
              "        [ 42.,  58.,  22.],\n",
              "        [ 32.,  45.,  19.]],\n",
              "\n",
              "       [[217., 204., 222.],\n",
              "        [214., 206., 221.],\n",
              "        [224., 213., 219.],\n",
              "        ...,\n",
              "        [ 35.,  52.,  20.],\n",
              "        [ 32.,  42.,  17.],\n",
              "        [ 21.,  33.,  13.]],\n",
              "\n",
              "       [[205., 195., 206.],\n",
              "        [208., 198., 209.],\n",
              "        [210., 203., 210.],\n",
              "        ...,\n",
              "        [ 27.,  41.,  16.],\n",
              "        [ 27.,  39.,  17.],\n",
              "        [ 19.,  30.,  13.]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "x = image.img_to_array(img)\n",
        "x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZFSMRi3xo3EN",
        "outputId": "b2e6ecf8-af99-4201-f1f2-6da369519749"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(128, 128, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "x.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xyxptBgAo_6l",
        "outputId": "c7185c13-de68-4145-bf1e-0a117dd9d5db"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1, 128, 128, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "x = np.expand_dims(x,axis=0)\n",
        "x.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KQ-zKN_4pGq-",
        "outputId": "50afb01b-1d3c-4705-8b21-52928c90d132"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0., 0., 1., 0., 0.]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "pred_prob = model.predict(x)\n",
        "pred_prob"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XNAYGxdPpK3_",
        "outputId": "6eae1ca0-e699-450e-95b4-00216af1e903"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "class_name = [\"daisy\",\"dandelion\",\"rose\",\"sunfower\",\"tulip\"]\n",
        "pred_id = pred_prob.argmax(axis=1)[0]\n",
        "pred_id"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8WtAPxJTp3Kj"
      },
      "source": [
        "# ***Test the Model***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FXtG5kYNpSOd",
        "outputId": "e0ac18d7-0fc2-4177-d91b-471051ce3568"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predicted flower is rose\n"
          ]
        }
      ],
      "source": [
        "print(\"Predicted flower is\",str(class_name[pred_id]))"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "collapsed_sections": [],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}